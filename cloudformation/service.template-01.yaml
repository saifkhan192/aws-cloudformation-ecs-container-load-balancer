AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy container to ECS service

# So, for now, the solution is to create the CloudFormation stack with a DesiredCount of 0 for the Service,
# upload the appropriate Image to the repository and then update the CloudFormation stack to scale up the service.
# Or alternately, have a separate template that sets up core infrastructure like the repository,
# upload builds to that and then have a separate template to run that sets up the Services themselves.

Parameters:
  Subnet1ID:
    Type: String
  Subnet2ID:
    Type: String
  VPCID:
    Type: String
  EcrRepository:
    Type: String
    Default: core-deployment-ecr-repo
  QueueStackName:
    Type: String
    Default: queue-example
  AppDesiredCount:
    Type: Number
    Default: 1
  WorkerDesiredCount:
    Type: Number
    Default: 1
  CreateELB:
    Type: String
    Default: "no"
Conditions:
  CreateELBCondition: !Equals
    - !Ref CreateELB
    - yes

Resources:
  # It hosts a group of ecs tasks
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"

  LogGroupApp:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-app"
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  LogGroupWorker:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-worker"
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  # managed policty to do actions like put logs to cloudwatch and other needed actions
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ecs-task-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # allow traffic to server and out of service
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-cluster-sg"
      GroupDescription: Security group for container
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowSQSReceiveMessage
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:GetQueueUrl
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Resource:
                  Fn::ImportValue:
                    Fn::Sub: "${QueueStackName}::QueueArn"
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource:
                  - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/*"
              # - Action:
              #     - ssm:GetParameters
              #   Effect: Allow
              #   Resource:
              #     - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: demo-app-task
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: demo-app
          # Image: nginx:1.17.7 # pull image from docker hub
          Image:
            !Join [
              "",
              [
                !Ref "AWS::AccountId",
                ".dkr.ecr.",
                !Ref "AWS::Region",
                ".amazonaws.com/",
                !Ref EcrRepository,
                "",
              ],
            ]
          # EntryPoint: ["npm", "run", "start"]
          EntryPoint: ["npm", "run", "start:ts"]
          PortMappings:
            - ContainerPort: 80
          # HealthCheck:
          #   Command:
          #     - CMD-SHELL
          #     - curl -s http://localhost:80/health
          #   Interval: 5
          #   Retries: 3
          #   StartPeriod: 10
          #   Timeout: 2
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroupApp
              awslogs-stream-prefix: ecs
          Environment:
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"
            - Name: PORT
              Value: 80
            - Name: NODE_ENV
              Value: "production"
            - Name: EVENT_BUS_NAME
              Value: "core-events-bus"
            - Name: POSTGRES_DB_HOST
              Value: "{{resolve:ssm:/example/dev/database/core/EndpointAddress}}"
            - Name: POSTGRES_DB_USERNAME
              Value: "{{resolve:ssm:/example/dev/database/core/MasterUsername}}"
            - Name: POSTGRES_DB_PASSWORD
              Value: "{{resolve:ssm:/example/dev/database/core/MasterUserPassword}}"
            - Name: POSTGRES_DB_NAME
              Value: "{{resolve:ssm:/example/dev/database/core/DatabaseName}}"
      RequiresCompatibilities:
        - EC2
        - FARGATE

  TaskDefinitionWorker:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: demo-worker-task
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: demo-worker
          # Image: nginx:1.17.7 # pull image from docker hub
          Image:
            !Join [
              "",
              [
                !Ref "AWS::AccountId",
                ".dkr.ecr.",
                !Ref "AWS::Region",
                ".amazonaws.com/",
                !Ref EcrRepository,
                "",
              ],
            ]
          # EntryPoint: ["npm", "run", "worker"]
          EntryPoint: ["npm", "run", "worker:ts"]
          # PortMappings:
          # - ContainerPort: 80
          # HealthCheck:
          #   Command:
          #     - CMD-SHELL
          #     - echo 'dummy healthcheck' || exit 1
          #   Interval: 5
          #   Retries: 3
          #   StartPeriod: 10
          #   Timeout: 2

          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroupWorker
              awslogs-stream-prefix: ecs
          Environment:
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"
            - Name: PORT
              Value: 80
            - Name: NODE_ENV
              Value: "production"
            - Name: EVENT_BUS_NAME
              Value: "core-events-bus"
            - Name: POSTGRES_DB_HOST
              Value: "{{resolve:ssm:/example/dev/database/core/EndpointAddress}}"
            - Name: POSTGRES_DB_USERNAME
              Value: "{{resolve:ssm:/example/dev/database/core/MasterUsername}}"
            - Name: POSTGRES_DB_PASSWORD
              Value: "{{resolve:ssm:/example/dev/database/core/MasterUserPassword}}"
            - Name: POSTGRES_DB_NAME
              Value: "{{resolve:ssm:/example/dev/database/core/DatabaseName}}"
      RequiresCompatibilities:
        - EC2
        - FARGATE

  # ECS is a fully managed container orchestration service that helps you easily
  # deploy, manage, and scale containerized applications
  # If one of the tasks fails, the ECS service scheduler launches another instance of task definition to replace it

  # The default values of 200 and 100 mean that for a service of size of 6 tasks, during the deployment there will be 12 tasks running at one point.
  # This seems too much for the container instances to accommodate.
  # A proposed solution is to change the values to 150 and 50, resulting in total of 6 tasks running during deployment (3 new and 3 old) until deployment finishes.

  # If a task is run manually, and not as part of a service, the task will continue its lifecycle regardless of its health status.
  # For tasks that are part of a service, if the task reports as unhealthy then the task will be stopped and the service scheduler will replace it.

  Service:
    Type: AWS::ECS::Service
    # DependsOn:
      # - LoadBalancerListener
    Properties:
      ServiceName: !Sub "${AWS::StackName}-ecs-sevice-app"
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !Ref AppDesiredCount
      # This may need to be adjusted if the container takes a while to start up
      # HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE # aws will take cre of all the hardware and launching of task
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          # By default, the service scheduler spreads tasks across Availability Zones
          # use multiple subnets to ensure high availability
          Subnets:
            - !Ref Subnet1ID
            - !Ref Subnet2ID
          SecurityGroups:
            - !GetAtt ContainerSecurityGroup.GroupId # allow ingress on port 80
      # LoadBalancers:
      #   - TargetGroupArn: !Ref TargetGroup
      #     ContainerPort: 80
      #     # service will look up all TaskDefinitions with this name and bind with the service
      #     ContainerName: demo-app
      # LoadBalancers:
      #   - TargetGroupArn: !Ref TargetGroup
      #     ContainerPort: 80
      #     # service will look up all TaskDefinitions with this name and bind with the service
      #     ContainerName: demo-app
      # LoadBalancers: !If
      #   - CreateELBCondition
      #   - - TargetGroupArn: !Ref TargetGroup
      #       ContainerPort: 80
      #       ContainerName: demo-app
      #   - !Ref "AWS::NoValue"
      EnableExecuteCommand: true
      Tags:
        - Key: Name
          Value: EC2-Demo Service

  ServiceWorker:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub "${AWS::StackName}-ecs-sevice-worker"
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinitionWorker
      DesiredCount: !Ref WorkerDesiredCount
      LaunchType: FARGATE # aws will take cre of all the hardware and launching of task
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1ID
            - !Ref Subnet2ID
      EnableExecuteCommand: true
      Tags:
        - Key: Name
          Value: EC2-Demo Worker

  # LoadBalancerSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Condition: CreateELBCondition
  #   Properties:
  #     GroupName: !Sub "${AWS::StackName}-load-balancer-sg"
  #     GroupDescription: Security group for load balancer
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 80
  #         ToPort: 80
  #         CidrIp: 0.0.0.0/0

  # Layer 7 load balancer, operating at HTTP level
  # can route based on headers, method, path etc
  # LoadBalancer:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Condition: CreateELBCondition
  #   Properties:
  #     Name: !Sub "${AWS::StackName}-load-balancer"
  #     Subnets:
  #       - !Ref Subnet1ID
  #       - !Ref Subnet2ID
  #     SecurityGroups:
  #       - !GetAtt LoadBalancerSecurityGroup.GroupId

  # DNSRecord:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneId: "Z075735817N55WL6A29MV"
  #     Name: "test.maindomain.com"
  #     Type: A
  #     AliasTarget:
  #       DNSName: !GetAtt LoadBalancer.DNSName
  #       HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID

  # listen for traffic on specific protocol and port
  # LoadBalancerListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Condition: CreateELBCondition
  #   Properties:
  #     LoadBalancerArn: !Ref LoadBalancer
  #     Port: 80
  #     Protocol: HTTP
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref TargetGroup
  #     # Certificates:
  #     #   - CertificateArn: "arn:aws:acm:us-east-1:990844713352:certificate/62a9c067-8b96-481d-8a2b-4cef18cb538e"

  # provides monitoring, health check settings, routing strategies
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    # Condition: CreateELBCondition
    Properties:
      TargetType: ip
      Name: !Sub "${AWS::StackName}-load-balancer-tg"
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPCID
      HealthCheckIntervalSeconds: 10
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: "/health"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2

Outputs:
  Service:
    Description: Service
    Value:
      Ref: Service
    Export:
      Name: !Sub "${AWS::StackName}::ServiceName"
  ServiceWorker:
    Description: ServiceWorker
    Value:
      Ref: ServiceWorker
    Export:
      Name: !Sub "${AWS::StackName}::ServiceWorker"
  Cluster:
    Description: Cluster
    Value:
      Ref: Cluster
    Export:
      Name: !Sub "${AWS::StackName}::ClusterName"
  # LoadBalancerUrl2:
  #   Description: The URL of the ALB
  #   Value: !GetAtt LoadBalancer.DNSName
  #   Condition: CreateELBCondition
