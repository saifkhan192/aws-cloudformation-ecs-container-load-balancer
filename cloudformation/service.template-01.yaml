AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy container to ECS service

# So, for now, the solution is to create the CloudFormation stack with a DesiredCount of 0 for the Service,
# upload the appropriate Image to the repository and then update the CloudFormation stack to scale up the service.
# Or alternately, have a separate template that sets up core infrastructure like the repository,
# upload builds to that and then have a separate template to run that sets up the Services themselves.



# ECS is a fully managed container orchestration service that helps you easily
# deploy, manage, and scale containerized applications
# If one of the tasks fails, the ECS service scheduler launches another instance of task definition to replace it

# The default values of 200 and 100 mean that for a service of size of 6 tasks, during the deployment there will be 12 tasks running at one point.
# This seems too much for the container instances to accommodate.
# A proposed solution is to change the values to 150 and 50, resulting in total of 6 tasks running during deployment (3 new and 3 old) until deployment finishes.

# If a task is run manually, and not as part of a service, the task will continue its lifecycle regardless of its health status.
# For tasks that are part of a service, if the task reports as unhealthy then the task will be stopped and the service scheduler will replace it.


# Assuming you're looking for a routing solution (a.k.a. service discovery); there's nothing anything build into ECS. 
# You can go for the AWS solution which is to use Application Load Balancers (ALBs) that are nicely integrated with dynamic port binding 
# in your ECS cluster. The basic idea is simple: a request from service A to service B goes 
# first to a loadbalancer (ALB) that routes the request to a target group that contains all ports of running/healthy instances of service B.


# Service Connect on the other hand introduces a sidecar "proxy" container that that intercepts outgoing connections and routes them to the correct 
# destinations. The sidecar uses API calls to Cloud Map to look up an IP address of a healthy instance of the service in real time, 
# rather than relying on DNS entries, which may be stale


Parameters:
  Subnet1ID:
    Type: String
  Subnet2ID:
    Type: String
  VPCID:
    Type: String
  EcrRepository:
    Type: String
    Default: core-deployment-ecr-repo
  QueueStackName:
    Type: String
    Default: queue-example
  AppDesiredCount:
    Type: Number
    Default: 1
  WorkerDesiredCount:
    Type: Number
    Default: 1
  CreateELB:
    Type: String
    Default: "no"
  ContainerPort:
    Type: Number
    Default: 80

  # apk add curl
  # curl backend-api-bff
  # curl backend-api-core
  ServiceNameBFF:
    Description: Descriptive service name (e.g. backend, frontend)
    Type: String
    Default: backend-api-bff
  ServiceNameCore:
    Description: Descriptive service name (e.g. backend, frontend)
    Type: String
    Default: backend-api-core
  NameSpaceName:
    Description: just a common namespace
    Type: String
    Default: backend-namespace

Conditions:
  CreateELBCondition: !Equals
    - !Ref CreateELB
    - yes

Resources:
  # It hosts a group of ecs tasks
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"
      ServiceConnectDefaults:
        Namespace: !Ref NameSpaceName #Tasks that run in a namespace can use short names to connect to services in the namespace
  LogGroupApp:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-app"
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  LogGroupWorker:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-worker"
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  # managed policty to do actions like put logs to cloudwatch and other needed actions
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ecs-task-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      # Policies:
      #   - PolicyName: ecs-access-policy
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Effect: Allow
      #           Action:
      #             - ecs:RunTask
      #             - ecs:ExecuteCommand
      #             - ecs:DescribeTasks
      #             - ecs:ListServices
      #           Resource:
      #             - "*"

  # allow traffic to server and out of service
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-cluster-sg"
      GroupDescription: Security group for container
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0    # We don't know the SSM IP addresses ie: for aws ecs execute-command
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: AllowSQSReceiveMessage
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:GetQueueUrl
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Resource:
                  Fn::ImportValue:
                    Fn::Sub: "${QueueStackName}::QueueArn"
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource:
                  - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/*"

              - Effect: Allow
                Action:
                  - ecs:RunTask
                  - ecs:ExecuteCommand
                  - ecs:DescribeTasks
                  - ecs:ListServices
                Resource:
                  - "*"

              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: "*"


              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogStreams'
                  - 'logs:DescribeLogGroups'
                  - 'xray:PutTraceSegments'
                  - 'xray:PutTelemetryRecords'
                  - 'xray:GetSamplingRules'
                  - 'xray:GetSamplingTargets'
                  - 'xray:GetSamplingStatisticSummaries'
                  - 'ssm:GetParameters'
                Resource: '*'

  LogGroupServiceConnect:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}/service-connect"
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete


  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: demo-app-task
      Cpu: 256
      Memory: 512
      # ECS uses 4 networking modes. awsvpc, bridge, host and none. None is not relevant here as there is no networking there.
      # For awsvpc, the container gets its own ENI. Which means that your container will act as a host and the port that you expose will be the port that you serve on.
      # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: demo-app
          # Image: nginx:1.17.7 # pull image from docker hub
          Image:
            !Join [
              "",
              [
                !Ref "AWS::AccountId",
                ".dkr.ecr.",
                !Ref "AWS::Region",
                ".amazonaws.com/",
                !Ref EcrRepository,
                "",
              ],
            ]
          # EntryPoint: ["npm", "run", "start"]
          EntryPoint: ["npm", "run", "start:ts"]
          LinuxParameters:
            InitProcessEnabled: true
          ReadonlyRootFilesystem: false # allow task definition to use ECS Exec
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Name: backend-bff #This parameter only applies to Service Connect
          HealthCheck:
            Command:
              - CMD-SHELL
              # - curl -s http://localhost/health
              - echo 'dummy healthcheck1' || exit 1
            Interval: 5
            Timeout: 3
            Retries: 3
            StartPeriod: 10
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroupApp
              awslogs-stream-prefix: !Ref ServiceNameBFF
          Environment:
            - Name: SERVICE_NAME
              Value: !Ref ServiceNameBFF
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"
            - Name: PORT
              Value: 80
            - Name: NODE_ENV
              Value: "production"
            - Name: EVENT_BUS_NAME
              Value: "core-events-bus"
            - Name: POSTGRES_DB_HOST
              Value: "{{resolve:ssm:/example/dev/database/core/EndpointAddress}}"
            - Name: POSTGRES_DB_USERNAME
              Value: "{{resolve:ssm:/example/dev/database/core/MasterUsername}}"
            - Name: POSTGRES_DB_PASSWORD
              Value: "{{resolve:ssm:/example/dev/database/core/MasterUserPassword}}"
            - Name: POSTGRES_DB_NAME
              Value: "{{resolve:ssm:/example/dev/database/core/DatabaseName}}"
            - Name: URL_API_BFF
              Value: !Sub  "http://${ServiceNameBFF}"
            - Name: URL_API_CORE
              Value: !Sub  "http://${ServiceNameCore}"
      RequiresCompatibilities:
        - EC2
        - FARGATE

  TaskDefinitionWorker:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: demo-worker-task
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !Ref TaskRole

      ContainerDefinitions:
        - Name: demo-worker
          # Image: nginx:1.17.7 # pull image from docker hub
          Image:
            !Join [
              "",
              [
                !Ref "AWS::AccountId",
                ".dkr.ecr.",
                !Ref "AWS::Region",
                ".amazonaws.com/",
                !Ref EcrRepository,
                "",
              ],
            ]
          # EntryPoint: ["npm", "run", "worker:ts"]
          EntryPoint: ["npm", "run", "start:ts"]
          LinuxParameters:
            InitProcessEnabled: true
          ReadonlyRootFilesystem: false
          PortMappings:
          - ContainerPort: !Ref ContainerPort
            Name: backend-core #This parameter only applies to Service Connect
          HealthCheck:
            Command:
              - CMD-SHELL
              # - curl -s http://localhost/health
              - echo 'dummy healthcheck2' || exit 1
            Interval: 5
            Timeout: 3
            Retries: 3
            StartPeriod: 10
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroupWorker
              awslogs-stream-prefix: !Ref ServiceNameCore
          Environment:
            - Name: SERVICE_NAME
              Value: !Ref ServiceNameCore
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"
            - Name: PORT
              Value: 80
            - Name: NODE_ENV
              Value: "production"
            - Name: EVENT_BUS_NAME
              Value: "core-events-bus"
            - Name: POSTGRES_DB_HOST
              Value: "{{resolve:ssm:/example/dev/database/core/EndpointAddress}}"
            - Name: POSTGRES_DB_USERNAME
              Value: "{{resolve:ssm:/example/dev/database/core/MasterUsername}}"
            - Name: POSTGRES_DB_PASSWORD
              Value: "{{resolve:ssm:/example/dev/database/core/MasterUserPassword}}"
            - Name: POSTGRES_DB_NAME
              Value: "{{resolve:ssm:/example/dev/database/core/DatabaseName}}"
            - Name: URL_API_BFF
              Value: !Sub  "http://${ServiceNameBFF}"
            - Name: URL_API_CORE
              Value: !Sub  "http://${ServiceNameCore}"
      RequiresCompatibilities:
        - EC2
        - FARGATE

  Service:
    Type: AWS::ECS::Service
    # DependsOn:
      # - LoadBalancerListener
    Properties:
      ServiceName: !Sub "${AWS::StackName}-ecs-sevice-app"
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !Ref AppDesiredCount
      # This may need to be adjusted if the container takes a while to start up
      # HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE # aws will take cre of all the hardware and launching of task
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          # By default, the service scheduler spreads tasks across Availability Zones
          # use multiple subnets to ensure high availability
          Subnets:
            - !Ref Subnet1ID
            - !Ref Subnet2ID
          SecurityGroups:
            - !GetAtt ContainerSecurityGroup.GroupId # allow ingress on port 80
      # LoadBalancers:
      #   - TargetGroupArn: !Ref TargetGroup
      #     ContainerPort: 80
      #     # service will look up all TaskDefinitions with this name and bind with the service
      #     ContainerName: demo-app
      # LoadBalancers: !If
      #   - CreateELBCondition
      #   - - TargetGroupArn: !Ref TargetGroup
      #       ContainerPort: 80
      #       ContainerName: demo-app
      #   - !Ref "AWS::NoValue"
      EnableExecuteCommand: true
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !Ref NameSpaceName
        Services:
          - DiscoveryName: !Join ["-", [!Ref ServiceNameBFF, "discovery-name"]] ## Avoid using the same service with Service Discovery in a namespace.
            PortName: backend-bff
            ClientAliases:
              - Port: 80
                DnsName: !Ref ServiceNameBFF
            # IngressPortOverride: 8081 # port number for the Service Connect proxy to listen on.
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-region: !Ref AWS::Region
            awslogs-group: !Ref LogGroupServiceConnect
            awslogs-stream-prefix: !Ref ServiceNameBFF
      Tags:
        - Key: Name
          Value: EC2-Demo Service

  ServiceWorker:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub "${AWS::StackName}-ecs-sevice-worker"
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinitionWorker
      DesiredCount: !Ref WorkerDesiredCount
      LaunchType: FARGATE # aws will take cre of all the hardware and launching of task
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1ID
            - !Ref Subnet2ID
      EnableExecuteCommand: true
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !Ref NameSpaceName
        Services:
          - DiscoveryName: !Join ["-", [!Ref ServiceNameCore, "discovery-name"]] ## Avoid using the same service with Service Discovery in a namespace.
            PortName: backend-core
            ClientAliases:
              - Port: 80
                DnsName: !Ref ServiceNameCore
            # IngressPortOverride: 8080 # port number for the Service Connect proxy to listen on.
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-region: !Ref AWS::Region
            awslogs-group: !Ref LogGroupServiceConnect
            awslogs-stream-prefix: !Ref ServiceNameCore
      Tags:
        - Key: Name
          Value: EC2-Demo Worker

  # LoadBalancerSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Condition: CreateELBCondition
  #   Properties:
  #     GroupName: !Sub "${AWS::StackName}-load-balancer-sg"
  #     GroupDescription: Security group for load balancer
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 80
  #         ToPort: 80
  #         CidrIp: 0.0.0.0/0

  # Layer 7 load balancer, operating at HTTP level
  # can route based on headers, method, path etc
  # LoadBalancer:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Condition: CreateELBCondition
  #   Properties:
  #     Name: !Sub "${AWS::StackName}-load-balancer"
  #     Subnets:
  #       - !Ref Subnet1ID
  #       - !Ref Subnet2ID
  #     SecurityGroups:
  #       - !GetAtt LoadBalancerSecurityGroup.GroupId

  # DNSRecord:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneId: "Z075735817N55WL6A29MV"
  #     Name: "test.maindomain.com"
  #     Type: A
  #     AliasTarget:
  #       DNSName: !GetAtt LoadBalancer.DNSName
  #       HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID

  # listen for traffic on specific protocol and port
  # LoadBalancerListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Condition: CreateELBCondition
  #   Properties:
  #     LoadBalancerArn: !Ref LoadBalancer
  #     Port: 80
  #     Protocol: HTTP
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref TargetGroup
  #     # Certificates:
  #     #   - CertificateArn: "arn:aws:acm:us-east-1:990844713352:certificate/62a9c067-8b96-481d-8a2b-4cef18cb538e"

  # provides monitoring, health check settings, routing strategies
  # TargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   # Condition: CreateELBCondition
  #   Properties:
  #     TargetType: ip
  #     Name: !Sub "${AWS::StackName}-load-balancer-tg"
  #     Port: 80
  #     Protocol: HTTP
  #     VpcId: !Ref VPCID
  #     HealthCheckIntervalSeconds: 10
  #     # will look for a 200 status code by default unless specified otherwise
  #     HealthCheckPath: "/health"
  #     HealthCheckTimeoutSeconds: 5
  #     UnhealthyThresholdCount: 2
  #     HealthyThresholdCount: 2

Outputs:
  Service:
    Description: Service
    Value:
      Ref: Service
    Export:
      Name: !Sub "${AWS::StackName}::ServiceName"
  ServiceWorker:
    Description: ServiceWorker
    Value:
      Ref: ServiceWorker
    Export:
      Name: !Sub "${AWS::StackName}::ServiceWorker"
  Cluster:
    Description: Cluster
    Value:
      Ref: Cluster
    Export:
      Name: !Sub "${AWS::StackName}::ClusterName"
  # LoadBalancerUrl2:
  #   Description: The URL of the ALB
  #   Value: !GetAtt LoadBalancer.DNSName
  #   Condition: CreateELBCondition
